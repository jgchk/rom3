// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Meta {
  id             Int               @id @default(autoincrement())
  name           String
  alternateNames MetaName[]
  shortDesc      String            @db.VarChar(255)
  longDesc       String            @db.Text
  parentMetas    MetaParent[]      @relation("MetaChild")
  childMetas     MetaParent[]      @relation("MetaParent")
  childStyles    StyleMetaParent[] @relation("StyleMetaParent")
  childTrends    TrendMetaParent[] @relation("TrendMetaParent")
}

model MetaName {
  meta   Meta   @relation(fields: [metaId], references: [id], onDelete: Cascade)
  metaId Int
  name   String

  @@id([metaId, name])
}

model MetaParent {
  parent   Meta @relation("MetaParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  child    Meta @relation("MetaChild", fields: [childId], references: [id], onDelete: Cascade)
  childId  Int

  @@id([parentId, childId])
}

model Scene {
  id                 Int              @id @default(autoincrement())
  name               String
  alternateNames     SceneName[]
  shortDesc          String           @db.VarChar(255)
  longDesc           String           @db.Text
  influencesScenes   SceneInfluence[] @relation("SceneInfluencer")
  influencedByScenes SceneInfluence[] @relation("SceneInfluenced")
  locations          SceneLocation[]
  cultures           SceneCulture[]
}

model SceneName {
  scene   Scene  @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  sceneId Int
  name    String

  @@id([sceneId, name])
}

model SceneInfluence {
  influencer   Scene @relation("SceneInfluencer", fields: [influencerId], references: [id], onDelete: Cascade)
  influencerId Int
  influenced   Scene @relation("SceneInfluenced", fields: [influencedId], references: [id], onDelete: Cascade)
  influencedId Int

  @@id([influencerId, influencedId])
}

model SceneLocation {
  scene      Scene    @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  sceneId    Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int

  @@id([sceneId, locationId])
}

model SceneCulture {
  scene     Scene   @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  sceneId   Int
  culture   Culture @relation(fields: [cultureId], references: [id], onDelete: Cascade)
  cultureId Int

  @@id([sceneId, cultureId])
}

model Style {
  id                 Int                   @id @default(autoincrement())
  name               String
  alternateNames     StyleName[]
  shortDesc          String                @db.VarChar(255)
  longDesc           String                @db.Text
  parentStyles       StyleStyleParent[]    @relation("StyleStyleChild")
  childStyles        StyleStyleParent[]    @relation("StyleStyleParent")
  childTrends        TrendStyleParent[]    @relation("TrendStyleParent")
  parentMetas        StyleMetaParent[]     @relation("StyleMetaChild")
  influencedByStyles StyleInfluence[]      @relation("StyleInfluenced")
  influencesStyles   StyleInfluence[]      @relation("StyleInfluencer")
  influencesTrends   TrendStyleInfluence[] @relation("TrendStyleInfluencer")
  locations          StyleLocation[]
  cultures           StyleCulture[]
}

model StyleName {
  style   Style  @relation(fields: [styleId], references: [id])
  styleId Int
  name    String

  @@id([styleId, name])
}

model StyleStyleParent {
  parent   Style @relation("StyleStyleParent", fields: [parentId], references: [id])
  parentId Int
  child    Style @relation("StyleStyleChild", fields: [childId], references: [id])
  childId  Int

  @@id([parentId, childId])
}

model StyleMetaParent {
  parent   Meta  @relation("StyleMetaParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  child    Style @relation("StyleMetaChild", fields: [childId], references: [id])
  childId  Int

  @@id([parentId, childId])
}

model StyleInfluence {
  influencer   Style @relation("StyleInfluencer", fields: [influencerId], references: [id])
  influencerId Int
  influenced   Style @relation("StyleInfluenced", fields: [influencedId], references: [id])
  influencedId Int

  @@id([influencerId, influencedId])
}

model StyleLocation {
  style      Style    @relation(fields: [styleId], references: [id])
  styleId    Int
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  @@id([styleId, locationId])
}

model StyleCulture {
  style     Style   @relation(fields: [styleId], references: [id])
  styleId   Int
  culture   Culture @relation(fields: [cultureId], references: [id])
  cultureId Int

  @@id([styleId, cultureId])
}

model Trend {
  id                 Int                   @id @default(autoincrement())
  name               String
  alternateNames     TrendName[]
  shortDesc          String                @db.VarChar(255)
  longDesc           String                @db.Text
  parentTrends       TrendTrendParent[]    @relation("TrendTrendChild")
  parentStyles       TrendStyleParent[]    @relation("TrendStyleChild")
  parentMetas        TrendMetaParent[]     @relation("TrendMetaChild")
  childTrends        TrendTrendParent[]    @relation("TrendTrendParent")
  influencedByTrends TrendTrendInfluence[] @relation("TrendTrendInfluenced")
  influencedByStyles TrendStyleInfluence[] @relation("TrendStyleInfluenced")
  influencesTrends   TrendTrendInfluence[] @relation("TrendTrendInfluencer")
  locations          TrendLocation[]
  cultures           TrendCulture[]
}

model TrendName {
  trend   Trend  @relation(fields: [trendId], references: [id])
  trendId Int
  name    String

  @@id([trendId, name])
}

model TrendTrendParent {
  parent   Trend @relation("TrendTrendParent", fields: [parentId], references: [id])
  parentId Int
  child    Trend @relation("TrendTrendChild", fields: [childId], references: [id])
  childId  Int

  @@id([parentId, childId])
}

model TrendStyleParent {
  parent   Style @relation("TrendStyleParent", fields: [parentId], references: [id])
  parentId Int
  child    Trend @relation("TrendStyleChild", fields: [childId], references: [id])
  childId  Int

  @@id([parentId, childId])
}

model TrendMetaParent {
  parent   Meta  @relation("TrendMetaParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  child    Trend @relation("TrendMetaChild", fields: [childId], references: [id])
  childId  Int

  @@id([parentId, childId])
}

model TrendTrendInfluence {
  influencer   Trend @relation("TrendTrendInfluencer", fields: [influencerId], references: [id])
  influencerId Int
  influenced   Trend @relation("TrendTrendInfluenced", fields: [influencedId], references: [id])
  influencedId Int

  @@id([influencerId, influencedId])
}

model TrendStyleInfluence {
  influencer   Style @relation("TrendStyleInfluencer", fields: [influencerId], references: [id])
  influencerId Int
  influenced   Trend @relation("TrendStyleInfluenced", fields: [influencedId], references: [id])
  influencedId Int

  @@id([influencerId, influencedId])
}

model TrendLocation {
  trend      Trend    @relation(fields: [trendId], references: [id])
  trendId    Int
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  @@id([trendId, locationId])
}

model TrendCulture {
  trend     Trend   @relation(fields: [trendId], references: [id])
  trendId   Int
  culture   Culture @relation(fields: [cultureId], references: [id])
  cultureId Int

  @@id([trendId, cultureId])
}

model Location {
  id      Int    @id @default(autoincrement())
  city    String
  region  String
  country String

  scenes SceneLocation[]
  styles StyleLocation[]
  trends TrendLocation[]

  @@unique([city, region, country])
}

model Culture {
  id   Int    @id @default(autoincrement())
  name String

  scenes SceneCulture[]
  styles StyleCulture[]
  trends TrendCulture[]

  @@unique([name])
}
