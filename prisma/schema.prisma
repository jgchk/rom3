generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum GenreType {
  META
  SCENE
  STYLE
  TREND
}

model Genre {
  id             Int              @id @default(autoincrement())
  type           GenreType
  name           String
  alternateNames GenreName[]
  shortDesc      String?          @db.VarChar(255)
  longDesc       String?          @db.Text
  trial          Boolean          @default(false)
  parents        GenreParent[]    @relation("GenreChild")
  children       GenreParent[]    @relation("GenreParent")
  influences     GenreInfluence[] @relation("GenreInfluencer")
  influencedBy   GenreInfluence[] @relation("GenreInfluenced")
  locations      GenreLocation[]
  cultures       GenreCulture[]

  createdInCorrection GenreCreate?
  editedInCorrection  GenreEdit?    @relation("GenreEditUpdated")
  editedByCorrection  GenreEdit[]   @relation("GenreEditTarget")
  deletedByCorrection GenreDelete[] @relation("GenreDeleteTarget")
}

model GenreName {
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId Int
  name    String

  @@id([genreId, name])
}

model GenreParent {
  parent   Genre @relation("GenreParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Int
  child    Genre @relation("GenreChild", fields: [childId], references: [id], onDelete: Cascade)
  childId  Int

  @@id([parentId, childId])
}

enum InfluenceType {
  HISTORICAL
  SONIC
}

model GenreInfluence {
  influencer    Genre          @relation("GenreInfluencer", fields: [influencerId], references: [id], onDelete: Cascade)
  influencerId  Int
  influenced    Genre          @relation("GenreInfluenced", fields: [influencedId], references: [id], onDelete: Cascade)
  influencedId  Int
  influenceType InfluenceType?

  @@id([influencerId, influencedId])
}

model GenreLocation {
  genre      Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId    Int
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId Int

  @@id([genreId, locationId])
}

model GenreCulture {
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId   Int
  culture   Culture @relation(fields: [cultureId], references: [id], onDelete: Cascade)
  cultureId Int

  @@id([genreId, cultureId])
}

model Location {
  id      Int    @id @default(autoincrement())
  city    String
  region  String
  country String

  genres GenreLocation[]

  @@unique([city, region, country])
}

model Culture {
  id   Int    @id @default(autoincrement())
  name String

  genres GenreCulture[]

  @@unique([name])
}

model Correction {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)

  creator   Account @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int

  create GenreCreate[]
  edit   GenreEdit[]
  delete GenreDelete[]
}

model GenreCreate {
  correction   Correction @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId Int

  createdGenre   Genre @relation(fields: [createdGenreId], references: [id], onDelete: Cascade)
  createdGenreId Int   @unique

  @@id([correctionId, createdGenreId])
}

model GenreEdit {
  correction   Correction @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId Int

  updatedGenre   Genre @relation("GenreEditUpdated", fields: [updatedGenreId], references: [id], onDelete: Cascade)
  updatedGenreId Int   @unique

  targetGenre   Genre @relation("GenreEditTarget", fields: [targetGenreId], references: [id], onDelete: Cascade)
  targetGenreId Int

  @@id([correctionId, targetGenreId])
}

model GenreDelete {
  correction   Correction @relation(fields: [correctionId], references: [id], onDelete: Cascade)
  correctionId Int

  targetGenre   Genre @relation("GenreDeleteTarget", fields: [targetGenreId], references: [id], onDelete: Cascade)
  targetGenreId Int

  @@id([correctionId, targetGenreId])
}

model Account {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  corrections Correction[]
}
